Bootstrap: docker
From: centos:7
OSversion: 7
Include: yum wget
# If you want the updates (available at the bootstrap date) to be installed
# inside the container during the bootstrap instead of the General Availability
# point release (7.x) then uncomment the following line

# UpdateURL: http://yum-repos.hpccluster/centos/7/updates/$basearch/

%test
    python3.6 --version
    pip3.6 --version
    gcc --version
    make --version

    python3.6 -c "import numpy"


%environment
    export PATH="/usr/local/bin:$PATH:/usr/local/conda/bin/"
    source /usr/local/conda/bin/activate
    export AUGUSTUS_CONFIG_PATH=/opt/augustus-3.3/config/
    export TRINITY_HOME=/usr/local/bin/trinityrnaseq/
    export  PATH=$PATH:${TRINITY_HOME}
    alias python=python3.6


%post
    mkdir /jic
    mkdir /nbi
    mkdir /tgac
    mkdir /ei
    mkdir /tsl
    mkdir /opt/software

    ### Install your packages ###
    cd /opt/software/
    # yum -y install yum-utils which wget
    # yum -y groupinstall development
    # yum -y install https://centos7.iuscommunity.org/ius-release.rpm
    # yum -y install python36u python36u-devel
    # yum -y install zlib autoconf automake libtool pthreads tar curl cmake3 git openssl-devel
    # cmake3 --version
    # yum -y install perl gsl-devel libsqlite3x-devel libboost-graph-dev suitesparse-devel lpsolve-devel
    # yum -y install lzma-devel zlib-devel ncurses-devel bzip2-devel bzip2-devel xz-devel
    # yum -y install blas-devel libgfortran
    # yum -y install pcre-devel curl libcurl-devel perl-WWW-Curl libxml2-devel xz-devel 
    # yum -y install perl gsl-devel libsqlite3x-devel libboost-graph-dev suitesparse-devel lpsolve-devel \
    #     	lzma-devel zlib-devel ncurses-devel bzip2-devel bzip2-devel xz-devel \
    # 		perl-devel perl-CPAN libxml2-devel

    yum -y install centos-release-scl
    yum -y install scl-utils
    yum -y install devtoolset-7-gcc*
    scl enable devtoolset-7 bash
    which gcc
    gcc --version
    mkdir -p /etc/profile.d/
    echo -e '#!/bin/bash\nsource scl_source enable devtoolset-7' > /etc/profile.d/enablegcc7.sh

    ### Perl
    yum -y install perl-CPAN perl-App-cpanminus
    yum -y install perl-DB_File
    yum -y install perl-URI
    yum -y install perl-Archive-Tar
    yum -y install perl-Digest-MD5
    yum -y install perl-List-MoreUtils

    gcc --version
    make --version

    # Clean up yum
    yum clean all

    version=2.5.1
    cd /usr/local/src
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b -p /usr/local/conda
    export PATH="/usr/local/conda/bin:$PATH"
    source activate
    conda install -y -c conda-forge jemalloc ruby=2.4.4 pip

    # FullLengtherNext
    ruby --version
    gem install -q -f full_lengther_next  -v 1.0.1 -N
    # sed -i '59,61s/^/#/' /usr/local/lib/ruby/gems/2.5.0/gems/full_lengther_next-1.0.1/bin/full_lengther_next
    full_lengther_next --help;

    # Install exonerate
    conda install -c bioconda exonerate=2.4.0

    python3 --version
    cd $(dirname $(which python3))
    cd /opt/software/

    # Install samtools
    export LD_LIBRARY_PATH="/usr/include/:$LD_LIBRARY_PATH"
    export CPPFLAGS="-I/usr/include/:/usr/local/include:$CPPFLAGS"

    # Install python requirements
    wget https://github.com/EI-CoreBioinformatics/mikado/blob/1.2.4/requirements.txt
    cat requirements.txt
    pip3 install -r requirements.txt

    # Install TopHat2
    # This will need to be installed in a specific CONDA ENVIRONMENT

    # Install BLAST
    wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.7.1/ncbi-blast-2.7.1+-1.x86_64.rpm
    rpm -ivh ncbi-blast-2.7.1+-1.x86_64.rpm
    blastx -help > /dev/null 2> /dev/null

    # Install MagicBlast
    wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/magicblast/1.4.0/ncbi-magicblast-1.4.0-2.x86_64.rpm
    rpm -ivh ncbi-magicblast-1.4.0-2.x86_64.rpm
    magicblast -help > /dev/null 2> /dev/null

    # Install CDHit
    conda install -y -c bioconda cd-hit

    # LibDeflate
    cd /opt/software/
    git clone https://github.com/ebiggers/libdeflate.git
    cd libdeflate
    make -j 20
    make install
    cd ../
    rm -rf libdeflate

    # CPAN
    curl -L http://cpanmin.us | perl - App::cpanminus
    cpanm -i Parallel::ForkManager File::Which Scalar::Util::Numeric  # I might need more for augustus

    # HTSLib
    wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2
    tar xaf htslib-1.9.tar.bz2
    mv htslib-1.9 htslib  # Necessary for augustus
    cd htslib
    ./configure --enable-libcurl --enable-plugins --enable-s3  --with-libdeflate
    make -j 20
    make install
    htsfile --help 2>&1 | head
    # tabix
    cd ../
    rm htslib-1.9.tar.bz2

    ### Samtools
    wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
    tar xaf samtools-1.9.tar.bz2
    mv samtools-1.9 samtools  # Necessary for augustus
    cd samtools  # and similarly for bcftools and htslib
    ./configure --enable-libcurl --enable-plugins --enable-s3
    make -j 20
    make install
    samtools --help 2>&1 | head
    cd ../
    rm samtools-1.9.tar.bz2

    # BCFTools
    wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
    tar xaf bcftools-1.9.tar.bz2
    mv bcftools-1.9 bcftools
    cd bcftools
    ./configure --enable-libcurl --enable-plugins --enable-s3
    make -j 20
    make install
    bcftools --help 2>&1 | head
    cd /opt/software/
    rm -rf bcftools-1.9.tar.bz2

    # BAMtools
    wget https://github.com/pezmaster31/bamtools/archive/v2.5.1.tar.gz -O bamtools-v2.5.1.tar.gz
    tar xaf bamtools-v2.5.1.tar.gz
    mv bamtools-2.5.1 bamtools
    cd bamtools
    sed -e '/set( CMAKE_BUILD_TYPE Release )/a set( CMAKE_CXX_FLAGS_RELEASE "-std=c++98 ${CMAKE_CXX_FLAGS_RELEASE}" )' -i CMakeLists.txt  # BugFix for linking
    mkdir build
    cd build
    cmake3 ../
    make -j 20
    make install
    bamtools --help 2>&1 | head
    cd ../../
    rm -rf bamtools-v2.5.1.tar.gz

    # Trinity
    cd /usr/local/bin/
    git clone https://github.com/trinityrnaseq/trinityrnaseq.git
    cd trinityrnaseq
    git checkout 06f284a  # Tag 2.6.6
    make
    make plugins
    make install
    Trinity --help

    # Kallisto
    wget https://github.com/pachterlab/kallisto/releases/download/v0.44.0/kallisto_linux-v0.44.0.tar.gz
    tar xaf kallisto_linux-v0.44.0.tar.gz
    mv kallisto_linux-v0.44.0/kallisto -t /usr/local/bin
    kallisto version
    cd /opt/software/
    rm -rf kallisto_linux-v0.44.0.tar.gz kallisto_linux-v0.44.0/;

    # FASTQC
    conda install -y -c bioconda fastqc=0.11.7

    # BowTie2
    cd /opt/software/
    wget https://github.com/BenLangmead/bowtie2/releases/download/v2.3.4.2/bowtie2-2.3.4.2-linux-x86_64.zip
    unzip bowtie2-2.3.4.2-linux-x86_64.zip
    mv bowtie2-2.3.4.2-linux-x86_64/bowtie2* -t /usr/local/bin/
    rm -rf bowtie2-2.3.4.2-linux-x86_64.zip bowtie2-2.3.4.2-linux-x86_64
    bowtie2 --help

    # Java
    cd /opt/software
    wget --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jre-8u181-linux-x64.rpm"
    rpm -ivh jre-8u181-linux-x64.rpm
    rm jre-8u181-linux-x64.rpm
    java --help

    # Salmon
    cd /opt/software/
    wget https://github.com/COMBINE-lab/salmon/releases/download/v0.11.2/salmon-0.11.2-linux_x86_64.tar.gz
    tar xaf salmon-0.11.2-linux_x86_64.tar.gz
    mv salmon-0.11.2-linux_x86_64/lib/* -t /usr/local/lib/
    mv salmon-0.11.2-linux_x86_64/bin/salmon /usr/local/bin/
    rm -rf salmon-0.11.2-linux_x86_64/ salmon-0.11.2-linux_x86_64.tar.gz

    # Jellyfish
    cd /opt/software
    wget https://github.com/gmarcais/Jellyfish/releases/download/v2.2.10/jellyfish-linux
    chmod 755 jellyfish-linux
    mv jellyfish-linux /usr/local/bin/jellyfish

    # RSEM
    conda install -y -c bioconda rsem

    # MultiQC
    pip3.6 install git+https://github.com/ewels/MultiQC.git

    # Boost
    echo "Installing boost"
    wget -q https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
    tar -xf boost_1_68_0.tar.gz
    cd boost_1_68_0
    ./bootstrap.sh --without-libraries=python  # --with-libraries=mpi,atomic,chrono,timer,program_options,filesystem,system,graph,graph_parallel,iostreams,thread,math
    ./b2 -d0 -j20 install;
    cd /opt/software/
    rm -rf boost_1_68_0.tar.gz boost_1_68_0;

    # Install cufflinks
    # Hopefully this functions
    git clone https://github.com/cole-trapnell-lab/cufflinks.git
    cd cufflinks
    git checkout b4fa050
    autoreconf --install
    ./configure
    make -j 20
    make install
    cufflinks --help 2>&1 | head
    cd /opt/software/
    rm -rf cufflinks/

    # Install gffread - this has to be *after* cufflinks as it supercedes it
    cd /opt/software/
    git clone https://github.com/gpertea/gclib.git
    cd gclib
    git checkout 54917d0
    cd ../
    git clone https://github.com/gpertea/gffread.git
    cd gffread
    git checkout ba7535f
    make
    cp gffread /usr/local/bin/
    cd /opt/software/
    gffread --help 2>&1 | head
    rm -rf gffread gclib

    # Augustus
    export TOOLDIR=/opt/software/
    wget http://bioinf.uni-greifswald.de/augustus/binaries/augustus-3.3.1.tar.gz
    tar xaf augustus-3.3.1.tar.gz
    cd augustus-3.3.1
    sed -i 's/#.*COMPGENEPRED = true/COMPGENEPRED = true/; s/# SQLITE = true/SQLITE = true/; s/# ZIPINPUT = true/ZIPINPUT = true/' common.mk
    sed -i '/^INCLUDES/s|INCLUDES.*|BAMTOOLS=/usr/local/bin/bamtools\nINCLUDES=/usr/local/include/bamtools|; /LIBS = -lbamtools -lz/s|LIBS = -lbamtools -lz|LIBS= /usr/local/lib/libbamtools.a -lz|' auxprogs/bam2hints/Makefile
    sed -i '/^BAMTOOLS/s|BAMTOOLS.*|BAMTOOLS = /usr/local/include/bamtools/|' auxprogs/filterBam/src/Makefile
    sed -i 's/\(^LIBS=.*\)/\1 -ldl/' auxprogs/bam2wig/Makefile  # The presence of libdeflate should make this doable
    make -j 20;
    cd auxprogs;
    make -j 20;
    cd ../;
    make install
    for file in bin/*;
      do cp $file /opt/augustus-3.3/bin;
      if [ ! -s /usr/local/bin/$(basename $file)]; then

      	 ln -sf /opt/agustus-3.3/bin/$(basename $file) /usr/local/bin/;
      fi
    done
    augustus --help 2>&1 | head
    aln2wig --help 2>&1 | head
    bam2hints --help 2>&1 | head
    etraining 2>&1 | head;
    fastBlockSearch --help 2>&1 | head
    filterBam --help 2>&1 | head
    homGeneMapping --help 2>&1 | head
    joingenes --help 2>&1 | head
    echo | prepareAlign
    utrrnaseq --help 2>&1 | head
    cd /opt/software/
    rm -rf augustus-3.3.1.tar.gz augustus-3.3.1;

    # echo "Installing Portcullis"
    cd /opt/software/
    git clone --recursive https://github.com/maplesond/portcullis.git
    pip3.6 install --prefix=/usr/local/ pandas
    cd portcullis
    git checkout Release-1.1.2  # set the release
    # sed -i 's/b2 /b2 -j 20 /' build_boost.sh
    # ./build_boost.sh  # This should function in any case
    ./autogen.sh
    ./configure
    make V=1 -j 20
    make V=1 check -j 20
    make install
    cat tests/test-suite.log
    portcullis --help
    cd /opt/software/
    rm -rf portcullis

    # CLASS 2
    cd /opt/software/
    wget https://downloads.sourceforge.net/project/splicebox/CLASS-2.1.7.tar.gz
    tar xaf CLASS-2.1.7.tar.gz
    cd CLASS-2.1.7;
    bash build.sh
    make
    mv class junc clnb grader addXS -t /usr/local/bin/
    cd /opt/software/
    rm -rf CLASS-2.1.7 CLASS-2.1.7.tar.gz;

    # Stringtie binaries
    git clone -b v2.1.1 https://github.com/gpertea/stringtie.git
    cd stringtie
    make -j 4 release
    make install
    stringtie -h
    cd /opt/software/

    # Scallop
    wget https://github.com/Kingsford-Group/scallop/releases/download/v0.10.2/scallop-0.10.2_linux_x86_64.tar.gz
    tar xaf scallop-0.10.2_linux_x86_64.tar.gz
    cd scallop-0.10.2_linux_x86_64
    mv scallop -t /usr/local/bin/
    scallop --help
    cd /opt/software/
    rm -rf scallop-0.10.2_linux_x86_64.tar.gz scallop-0.10.2_linux_x86_64;

    # Strawberry
    git clone --recursive https://github.com/ruolin/strawberry.git
    cd strawberry
    git checkout 0.9.3
    mkdir build
    cmake3 -E chdir build/ cmake3 -G "Unix Makefiles" cmake -DCMAKE_BUILD_TYPE=Release ../
    cd build/
    make
    make install
    strawberry --help
    cd /opt/software/
    rm -rf strawberry

    # HISAT2
    conda install -c bioconda hisat2=2.1.0  # Conda version functions with Python3!

    # STAR
    wget https://github.com/alexdobin/STAR/archive/2.6.0c.tar.gz -O star-2.6.0c.tar.gz
    tar xaf star-2.6.0c.tar.gz
    mv STAR-2.6.0c/bin/Linux_x86_64_static/STAR -t /usr/local/bin/
    mv STAR-2.6.0c/bin/Linux_x86_64_static/STARlong -t /usr/local/bin/
    STAR --help
    STARlong --help
    cd /opt/software/
    rm -rf star-2.6.0c.tar.gz STAR-2.6.0c

    # GMAP
    wget http://research-pub.gene.com/gmap/src/gmap-gsnap-2019-09-12.tar.gz
    tar xaf gmap-gsnap-2019-09-12.tar.gz
    cd gmap-2019-09-12
    ./configure --enable-zlib --enable-bzlib
    make -j 20
    make install
    gmap --help
    gsnap --help
    cd /opt/software/
    rm -rf gmap-gsnap-2019-09-12.tar.gz gmap-2019-09-12

    # MiniMap2
    wget https://github.com/lh3/minimap2/releases/download/v2.12/minimap2-2.15_x64-linux.tar.bz2
    tar xaf minimap2-2.15_x64-linux.tar.bz2
    cd minimap2-2.15_x64-linux
    mv k8 minimap2 paftools.js -t /usr/local/bin/
    minimap2 --help
    cd /opt/software/
    rm -rf minimap2-2.15_x64-linux.tar.bz2 minimap2-2.15_x64-linux

    # GenomeTools
    cd /opt/software/
    wget https://github.com/genometools/genometools/archive/v1.5.10.tar.gz -O genometools-1.5.10.tar.gz
    tar xaf genometools-1.5.10.tar.gz
    cd genometools-1.5.10
    make 64bit=yes opt=yes cairo=no errorcheck=yes useshared=no -j 20
    make install
    cd /opt/software/
    rm -rf genometools-1.5.10.tar.gz genometools-1.5.10

    # PrinSeq for cleaning up sequences
    cd /usr/local/bin/
    wget https://downloads.sourceforge.net/project/prinseq/standalone/prinseq-lite-0.20.4.tar.gz
    tar xaf prinseq-lite-0.20.4.tar.gz
    chmod +x prinseq-lite-0.20.4/prinseq-*pl
    mv prinseq-lite-0.20.4/prinseq-*pl -t /usr/local/bin
    prinseq-lite.pl --help
    cd /opt/software/

    # Now install mikado
    wget https://github.com/EI-CoreBioinformatics/mikado/archive/2.0rc6.tar.gz
    tar xf 2.0rc6.tar.gz
    rm 2.0rc6.tar.gz
    cd mikado-2.0rc6
    pip install cython
    pip install .
    mikado --help

    # Finally install EiAnnot
    git clone --recursive https://github.com/EI-CoreBioinformatics/ei-annotation.git
    cd ei-annotation;
    cd eicore;
    python3 setup.py bdist_wheel;
    pip3.6 install --prefix=/usr/local/ -U dist/*whl;
    cd ../;
    python3 setup.py bdist_wheel;
    pip install --prefix=/usr/local/ -U dist/*whl;
    cd /opt/software/


%apprun snakemake
	snakemake "@"

%apprun hisat2-build
	hisat2-build "@"

%apprun jupyter
	jupyter "@"

%apprun gmap-build
	gmap-build "@"

%apprun gmap
	gmap "@"

%apprun gsnap
	gsnap "@"

%apprun mikado
	mikado "@"

%apprun samtools
	samtools "@"

%apprun portcullis
	portcullis "@"

%apprun junctools
	junctools "@"

%apprun stringtie
	stringtie "@"

%apprun class
	class "@"

%apprun hisat2
	hisat2 "@"

%apprun augustus
        /opt/augustus-3.3/bin/augustus "@"

%apprun filterBam
	/opt/augustus-3.3/bin/filterBam "@"

%apprun aln2wig
	/opt/augustus-3.3/bin/aln2wig "@"

%apprun joingenes
	/opt/augustus-3.3/bin/joingenes "@"

%apprun etraining
	/opt/augustus-3.3/bin/etraining "@"

%apprun bam2hints
	/opt/augustus-3.3/bin/bam2hints "@"

%apprun fastBlockSearch
	/opt/augustus-3.3/bin/fastBlockSearch "@"

%apprun homGeneMapping
	/opt/augustus-3.3/bin/homGeneMapping "@"

%apprun prepareAlign
	prepareAlign "@"

%apprun utrrnaseq
	utrrnaseq "@"

%apprun paftools
	k8 $(which paftools.js) "@"

%apprun k8
	k8 "@"

%apprun eiannot
	eiannot "@"

%apprun strawberry
	strawberry "@"

%apprun class
	class "@"

%apprun scallop
	scallop "@"

%apprun ruby
	ruby "@"

%apprun STAR
	STAR "@"

%apprun STARlong
	STARlong "@"

%apprun diamond
    diamond "@"

%apprun prinseq
    /usr/local/bin/prinseq-lite-0.20.4/prinseq-lite.pl "@"

%apprun "prinseq-lite.pl"
    /usr/local/bin/prinseq-lite-0.20.4/prinseq-lite.pl "@"

%apprun gt
    gt "@"

%apprun gffread
    gffread "@"

%apprun cufflinks
    cufflinks "@"

%apprun cuffcompare
    cuffcompare "@"
