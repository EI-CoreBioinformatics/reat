#!/usr/bin/env python3
import os
import sys
import argparse
import time
from textwrap import wrap

import pyfaidx

from eicore2.models.Codon import translate
from eicore2.parsers.GFF import GFFReader


def parse_args():
    p = argparse.ArgumentParser()
    group = p.add_mutually_exclusive_group(required=True)
    group.add_argument("-a", "--annotation", type=argparse.FileType('r'),
                       help="GFF file of the annotated species to extract proteins from")
    group.add_argument("-A", "--alignment", type=argparse.FileType('r'),
                       help="GFF file of the alignments to extract, filter and tag")
    p.add_argument("-g", "--genome", type=argparse.FileType('r'), required=True,
                   help="FASTA file of the reference to the annotated species to extract proteins from")
    p.add_argument("-l", "--min_protein", type=int, default=2,
                   help="Check the length of the translated CDS protein is longer than min_protein")
    p.add_argument("-m", "--max_intron", type=int, default=200000,
                   help="Check introns are shorter than max_intron")
    p.add_argument("-f", "--filters", choices=['all', 'none', 'intron_len', 'internal_stop', 'aa_len', 'splicing'],
                   help="Select which filters to activate", nargs='+', default='none')
    p.add_argument('--merge', dest='merge', action='store_true')
    p.add_argument('--no-merge', dest='merge', action='store_false')
    p.set_defaults(merge=False)
    p.add_argument("-y", "--proteins", type=argparse.FileType('w'))
    p.add_argument("-x", "--cds", type=argparse.FileType('w'))
    p.add_argument("--bed", type=argparse.FileType('w'))
    p.add_argument("-o", "--output", type=argparse.FileType('w'))
    args = p.parse_args()
    return args


def start_codons():
    return {"ATG"}
    # return {"ATG", "CTG", "TTG"}


def stop_codons():
    return {"TAA", "TGA", "TAG"}


def main():
    args = parse_args()

    fasta_file = args.genome
    is_alignment = True
    gff_file = args.alignment
    if gff_file is None:
        is_alignment = False
        gff_file = args.annotation
    min_length = args.min_protein
    max_intron = args.max_intron
    merge = args.merge

    output_file = sys.stdout
    if args.output:
        output_file = args.output

    error_file = sys.stderr

    protein_file = args.proteins
    cds_file = args.cds
    bed_file = args.bed

    filter_by_canonical_splicing = False
    filter_by_long_intron = False
    filter_short_proteins = False
    filter_by_internal_stop = False

    for _filter in args.filters:
        if _filter == "all":
            filter_by_canonical_splicing = True
            filter_by_long_intron = True
            filter_short_proteins = True
            filter_by_internal_stop = True
        if _filter == "none":
            filter_by_canonical_splicing = False
            filter_by_long_intron = False
            filter_short_proteins = False
            filter_by_internal_stop = False
        if _filter == "intron_len":
            filter_by_long_intron = True
        if _filter == "internal_stop":
            filter_by_internal_stop = True
        if _filter == "aa_len":
            filter_short_proteins = True
        if _filter == "splicing":
            filter_by_canonical_splicing = True

    print("##gff-version 3", file=output_file)
    print("#", os.path.basename(sys.argv[0]), ' ', ' '.join(sys.argv[1:]), sep='', file=output_file)
    print("#xspecies_tool 0.0.1", file=output_file)

    with pyfaidx.Fasta(fasta_file.name, read_ahead=10000000) as genome:
        total_genes = 0
        total_valid_genes = 0
        total_transcripts = 0
        total_valid_transcripts = 0
        total_monoexonic_transcripts = 0
        total_exons = 0
        total_exon_lengths = 0
        total_short_proteins = 0
        total_long_introns = 0
        total_intron_length = 0
        total_cds_intron_length = 0
        total_cds_len = 0
        total_intronic_transcripts = 0
        total_non_coding_rna = 0
        total_internal_stop = 0
        total_non_canonical_splicing = 0
        total_intergenic_distance = 0
        last_gene_chrom = ""
        last_gene_start = 0
        for gene in GFFReader(gff_file.name):
            num_valid_transcripts = 0
            first = True
            for mrna_id, mrna in sorted(gene.mrnas.items(), key=lambda x: x[0]):  # Sorted by name
                total_exons += len(mrna.exons)
                if len(mrna.cds_exons) == 0:
                    print(f"Non coding mrna: {mrna_id}", file=error_file)
                    total_non_coding_rna += 1
                    continue

                # Get translated seq before merging any short introns, this is for when the references have been
                # deliberately made to have small introns as a workaround for internal stop codons
                cds_seq, cds_length, cds_intron_len, last_codon = get_cds_seq(genome, mrna, is_alignment)
                aa_seq = translate(cds_seq)
                if merge:
                    # Merges introns < 4bp by default
                    mrna.merge_exons()
                # Check for canonical splice sites
                if len(mrna.exons) > 1:
                    long_introns, noncanonical_splicing, intron_length = check_splicing_sites(genome, max_intron, mrna)
                    if noncanonical_splicing > 0:
                        print(f"Non-canonical splicing: {mrna_id} {mrna.strand}", file=error_file)
                        total_non_canonical_splicing += 1
                        if is_alignment:
                            mrna.attr['aln_non_canonical_splice_sites'] = noncanonical_splicing
                            try:
                                mrna.attr['Note'] += f"|aln_non_canonical={noncanonical_splicing}"
                            except KeyError:
                                mrna.attr['Note'] = f"aln_non_canonical={noncanonical_splicing}"
                        else:
                            mrna.attr['ref_non_canonical_splice_sites'] = noncanonical_splicing
                            try:
                                mrna.attr['Note'] += f"|ref_non_canonical={noncanonical_splicing}"
                            except KeyError:
                                mrna.attr['Note'] = f"ref_non_canonical={noncanonical_splicing}"
                        if filter_by_canonical_splicing:
                            continue
                    if long_introns > 0:
                        total_long_introns += 1
                        if is_alignment:
                            mrna.attr['aln_long_introns'] = long_introns
                            try:
                                mrna.attr['Note'] += f"|aln_long_introns={long_introns}"
                            except KeyError:
                                mrna.attr['Note'] = f"aln_long_introns={long_introns}"
                        else:
                            mrna.attr['ref_long_introns'] = long_introns
                            try:
                                mrna.attr['Note'] += f"|ref_long_introns={long_introns}"
                            except KeyError:
                                mrna.attr['Note'] = f"ref_long_introns={long_introns}"
                        print(f"Long intron: {mrna_id}", file=error_file)
                        if filter_by_long_intron:
                            continue
                    total_intron_length += intron_length
                    total_intronic_transcripts += 1
                    total_cds_len += cds_length
                    total_cds_intron_length += cds_intron_len
                # Check CDS translated length
                if len(aa_seq) < min_length:
                    print(f"Protein < {min_length}: {mrna_id}", file=error_file)
                    if is_alignment:
                        mrna.attr['aln_short_protein'] = 'true'
                        try:
                            mrna.attr['Note'] += '|aln_short_protein=true'
                        except KeyError:
                            mrna.attr['Note'] = 'aln_short_protein=true'
                    else:
                        mrna.attr['ref_short_protein'] = 'true'
                        try:
                            mrna.attr['Note'] += '|ref_short_protein=true'
                        except KeyError:
                            mrna.attr['Note'] = 'ref_short_protein=true'
                    total_short_proteins += 1
                    if filter_short_proteins:
                        continue
                # Check for internal codon
                has_internal_stop = '*' in aa_seq[:-1]
                if has_internal_stop:
                    print(f"Internal stop: {mrna_id}", file=error_file)
                    if is_alignment:
                        mrna.attr['aln_internal_stop'] = 'true'
                        try:
                            mrna.attr['Note'] += '|aln_internal_stop=true'
                        except KeyError:
                            mrna.attr['Note'] = 'aln_internal_stop=true'
                    else:
                        mrna.attr['ref_internal_stop'] = 'true'
                        try:
                            mrna.attr['Note'] += '|ref_internal_stop=true'
                        except KeyError:
                            mrna.attr['Note'] = 'ref_internal_stop=true'
                    total_internal_stop += 1
                    if filter_by_internal_stop:
                        continue

                num_valid_transcripts += 1
                if len(mrna.exons) == 1:
                    total_monoexonic_transcripts += 1

                if cds_seq[:3] not in start_codons():
                    if is_alignment:
                        mrna.attr['aln_missing_start'] = 'true'
                        try:
                            mrna.attr['Note'] += '|aln_missing_start=true'
                        except KeyError:
                            mrna.attr['Note'] = 'aln_missing_start=true'
                    else:
                        mrna.attr['ref_missing_start'] = 'true'
                        try:
                            mrna.attr['Note'] += '|ref_missing_start=true'
                        except KeyError:
                            mrna.attr['Note'] = 'ref_missing_start=true'

                if is_alignment:
                    if last_codon not in stop_codons():
                        mrna.attr['aln_missing_stop'] = 'true'
                        try:
                            mrna.attr['Note'] += '|aln_missing_stop=true'
                        except KeyError:
                            mrna.attr['Note'] = 'aln_missing_stop=true'
                    else:  # Extend the last exon and cds_exon coordinates to include the stop codon
                        cds_seq += last_codon
                        gene.extend_three_prime_end_cds(mrna_id, 3)

                elif cds_seq[-3:] not in stop_codons():
                    mrna.attr['ref_missing_stop'] = 'true'
                    try:
                        mrna.attr['Note'] += '|ref_missing_stop=true'
                    except KeyError:
                        mrna.attr['Note'] = 'ref_missing_stop=true'

                if first:
                    print_gff_line(gene, "gene", gene, output_file)
                    first = False
                print_gff_line(mrna, "mRNA", mrna, output_file)

                for e in mrna.exons:
                    total_exon_lengths += e.end - e.start
                    print_gff_line(e, "exon", mrna, output_file)

                for c in mrna.cds_exons:
                    print_gff_line(c, "CDS", mrna, output_file)

                if protein_file:
                    print(">", mrna_id, sep='', file=protein_file)
                    if aa_seq[-1] == '*':
                        print('\n'.join(wrap(aa_seq[:-1])), file=protein_file)
                    else:
                        print('\n'.join(wrap(aa_seq)), file=protein_file)
                if cds_file:
                    cds_exons_seq_len = sum([e.end - e.start + 1 for e in mrna.cds_exons])
                    cds_exons_seq_len -= int(mrna.cds_exons[0].phase)
                    assert len(cds_seq) == cds_exons_seq_len
                    print(">", mrna_id, sep='', file=cds_file)
                    print('\n'.join(wrap(cds_seq)), file=cds_file)

                if bed_file:
                    s = mrna.to_bed(coding=True)
                    print(s, file=bed_file)

            if num_valid_transcripts > 0:
                total_valid_genes += 1
                total_valid_transcripts += num_valid_transcripts

            total_genes += 1
            if last_gene_chrom == gene.chrom:
                total_intergenic_distance += gene.start - last_gene_start
            last_gene_chrom = gene.chrom
            last_gene_start = gene.start
            total_transcripts += len(gene.mrnas.items())
            del gene

        print(f'Total genes: {total_genes}')
        print(f'Total transcripts: {total_transcripts}')
        print(f'Transcripts per gene: {total_transcripts / max(1, total_genes):.2f}')
        print(f'Valid genes: {total_valid_genes} / {total_genes}')
        print(f'Valid transcripts: {total_valid_transcripts} / {total_transcripts}')
        print(f'Valid transcripts per gene: {total_valid_transcripts / max(1, total_valid_genes):.2f}')
        print(f'Average CDS length: {total_cds_len / max(1, total_valid_transcripts):.2f}')
        print(f'Transcripts without coding exons: {total_non_coding_rna}')
        print(f'Monoexonic transcripts: {total_monoexonic_transcripts}')
        print(f'Exons per transcript: {total_exons / max(1, total_transcripts):.2f}')
        print(f'Average exon length: {total_exon_lengths / max(1, total_exons):.2f}')
        print(f'Transcripts with non-canonical splicing: {total_non_canonical_splicing}')
        print(f'Transcripts with introns > {max_intron}: {total_long_introns}')
        print(f'Transcripts with internal stop codons: {total_internal_stop}')
        print(f'Transcripts with proteins < {min_length}: {total_short_proteins}')
        print(f'Average intron length: {total_intron_length / max(1, total_intronic_transcripts):.2f}')
        print(f'Average CDS intron length: {total_cds_intron_length / max(1, total_intronic_transcripts):.2f}')
        print(f'Intergenic distance: {total_intergenic_distance / max(1, total_genes):.2f}')


def print_gff_line(item, ftype, mrna, output_file):
    try:
        phase = item.phase if item.phase else '.'
    except AttributeError:
        phase = '.'
    print(f"{item.chrom}\t{mrna.source}\t{ftype}\t{item.start}\t{item.end}\t"
          f"{item.score if item.score else '.'}\t"
          f"{item.strand if item.strand else '.'}\t"
          f"{phase}\t",
          file=output_file, end='')
    print_attributes(item, output_file)


def print_attributes(item, output_file):
    if item.uid:
        print(f"ID={item.uid}", file=output_file, end=';')
    attrl = list(item.attr.items())
    for k, v in attrl[:-1]:
        print(f"{k}=", file=output_file, end='')
        if isinstance(v, list):
            print(f"{','.join(v)}", file=output_file, end=';')
        else:
            print(f"{v}", file=output_file, end=';')

    k, v = attrl[-1]
    print(f"{k}=", file=output_file, end='')
    if isinstance(v, list):
        print(f"{','.join(v)}", file=output_file)
    else:
        print(f"{v}", file=output_file)


def check_splicing_sites(genome, max_intron, mrna):
    noncanonical_splicing = 0
    long_intron = 0
    intron_length = 0
    for i in mrna.introns:
        intron_length += i[1] - i[0]
        if i[1] - i[0] > max_intron:
            long_intron += 1

        if mrna.strand == '+':
            donor = genome.get_seq(mrna.chrom, i[0], i[0] + 1).seq
            acceptor = genome.get_seq(mrna.chrom, i[1] - 1, i[1]).seq
        else:
            acceptor = (-genome.get_seq(mrna.chrom, i[0], i[0] + 1)).seq
            donor = (-genome.get_seq(mrna.chrom, i[1] - 1, i[1])).seq

        # canonical (GT AG), (GC AG), (AT AC)
        if (donor.upper(), acceptor.upper()) not in (("GT", "AG"), ("GC", "AG"), ("AT", "AC")):
            noncanonical_splicing += 1
    return long_intron, noncanonical_splicing, intron_length


def get_cds_seq(genome, mrna, is_alignment=False):
    aln_seq = []
    cds_intron_len = 0
    last_codon = ""
    for e in mrna.cds_exons:
        if mrna.strand == '+':
            aln_seq.append(genome.get_seq(e.chrom, e.start, e.end).seq)
        else:
            aln_seq.append(genome.get_seq(e.chrom, e.start, e.end).reverse.complement.seq)

    if is_alignment:
        last_cds_exon = mrna.cds_exons[-1]
        if mrna.strand == '-':
            last_codon = genome.get_seq(
                last_cds_exon.chrom, last_cds_exon.start-4, last_cds_exon.start-2).complement.seq.upper()
        else:
            last_codon = genome.get_seq(
                last_cds_exon.chrom, last_cds_exon.end+1, last_cds_exon.end+3).seq.upper()

    for ei in mrna.cds_introns:
        cds_intron_len += ei[1] - ei[0]

    aln_cds = ''.join(aln_seq)
    aln_cds = aln_cds[int(mrna.cds_exons[0].phase):]
    return aln_cds.upper(), len(aln_cds), cds_intron_len, last_codon


if __name__ == '__main__':
    t1 = time.time()
    main()
    print(f'Done in {time.time() - t1:.2f}s')
