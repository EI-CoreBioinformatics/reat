#!/usr/bin/env python

import argparse
from collections import defaultdict

from annotation.lib.parsers.GFF import GFFReader


def main():
    parser = argparse.ArgumentParser('Script to augment a gff file with scores from mikado compare')
    parser.add_argument("--alignment", type=argparse.FileType('r'), help="Input alignment file (gff)")
    parser.add_argument("--compare", type=argparse.FileType('r'), nargs='+',
                        help="Compare results of 'alignment' vs other gff files")

    args = parser.parse_args()
    # Collect all transcript names and all scores onto lists
    compare_exon = defaultdict(list)
    compare_junc = defaultdict(list)
    for compare_file in args.compare:
        header = compare_file.readline()
        for line in compare_file:
            fields = line.strip().split('\t')
            alignment_name = fields[0]
            try:
                cds_exon_f1 = float(fields[5])
                compare_exon[alignment_name].append(cds_exon_f1)
            except ValueError:
                compare_exon[alignment_name].append(0.0)
            try:
                cds_junc_f1 = float(fields[6])
                compare_junc[alignment_name].append(cds_junc_f1)
            except ValueError:
                compare_junc[alignment_name].append(0.0)
    # Collate min,max,avg and add to the alignment gff attr
    for alignment in GFFReader(args.alignment):
        for mrna_id, transcript in alignment.mrnas.items():
            data = compare_exon[mrna_id]
            if not data:
                continue
            min_exon_f1 = min(data)
            max_exon_f1 = max(data)
            avg_exon_f1 = sum(data) / len(data)

            data = compare_junc[mrna_id]
            if not data:
                continue
            min_junc_f1 = min(data)
            max_junc_f1 = max(data)
            avg_junc_f1 = sum(data) / len(data)

            xscore = sum([ef1 >= 100 and jf1 >= 100 for ef1, jf1 in zip(compare_exon[mrna_id], compare_junc[mrna_id])])
            xscore *= 100. / len(data)

            transcript.attr['Note'] += f'|min_ef1:{min_exon_f1:.2f}|max_ef1:{max_exon_f1:.2f}|avg_ef1:{avg_exon_f1:.2f}' \
                                       f'|min_jf1:{min_junc_f1:.2f}|max_jf1:{max_junc_f1:.2f}|avg_jf1:{avg_junc_f1:.2f}' \
                                       f'|xscore:{xscore:.2f}'
            transcript.attr['min_ef1'] = f'{min_exon_f1:.2f}'
            transcript.attr['max_ef1'] = f'{max_exon_f1:.2f}'
            transcript.attr['avg_ef1'] = f'{avg_exon_f1:.2f}'

            transcript.attr['min_jf1'] = f'{min_junc_f1:.2f}'
            transcript.attr['max_jf1'] = f'{max_junc_f1:.2f}'
            transcript.attr['avg_jf1'] = f'{avg_junc_f1:.2f}'
            transcript.attr['xscore'] = f'{xscore:.2f}'

        alignment.print_gff()


if __name__ == '__main__':
    main()
