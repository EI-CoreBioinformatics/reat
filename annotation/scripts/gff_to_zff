#!/usr/bin/env python3
import argparse
import re
from collections import defaultdict


def load_cdss(gff_file):
    C = defaultdict(dict)
    for raw_line in gff_file:
        if raw_line[0] == '#':
            continue
        chrom, source, feature, start, end, phase, strand, frame, attributes = raw_line.strip().split('\t', maxsplit=9)
        if feature.lower() != "cds":
            continue
        gid = re.search('Parent *= *([^;]+)', attributes).group(1)
        start, end = (end, start) if strand == '-' else (start, end)
        try:
            C[chrom][gid+strand].append((start, end))
        except KeyError:
            C[chrom].update({gid+strand: [(start, end)]})
    return C


def main():
    p = argparse.ArgumentParser()
    p.add_argument("-a", "--annotation", type=argparse.FileType('r'),
                   help="GFF file of the annotated species to extract proteins from")
    p.add_argument("-g", "--genome", type=argparse.FileType('r'), help="Genome file")
    args = p.parse_args()
    gff_file = args.annotation
    C = load_cdss(gff_file)

    C_order = []
    for line in args.genome:
        if line[0] != '>':
            continue
        C_order.append(line[1:-1])

    for c in C_order:
        if len(C[c]) > 0:
            print(f">{c}")
        for n, g in C[c].items():
            strand = n[-1]
            name = n[:-1]
            if len(g) == 1:
                print(f"Esngl\t{g[0][0]}\t{g[0][1]}\t{name}")
            else:
                if strand == '+':
                    print(f"Einit\t{g[0][0]}\t{g[0][1]}\t{name}")
                    for e in g[1:-1]:
                        print(f"Exon\t{e[0]}\t{e[1]}\t{name}")
                    print(f"Eterm\t{g[-1][0]}\t{g[-1][1]}\t{name}")
                else:
                    print(f"Eterm\t{g[0][0]}\t{g[0][1]}\t{name}")
                    for e in reversed(g[1:-1]):
                        print(f"Exon\t{e[0]}\t{e[1]}\t{name}")
                    print(f"Einit\t{g[-1][0]}\t{g[-1][1]}\t{name}")


if __name__ == "__main__":
    main()
