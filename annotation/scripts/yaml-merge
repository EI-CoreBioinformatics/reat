#!/usr/bin/env python3

from functools import reduce
from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper
import argparse


def merge(a, b):
    """Merge two dicts overriding only values whilst keeping the nested structure intact"""
    for key in b:
        if key in a:
            if isinstance(a[key], dict) and isinstance(b[key], dict):  # Keep going until values
                merge(a[key], b[key])
            elif a[key] == b[key]:
                pass  # same leaf value, no action required
            else:
                a[key] = b[key]  # Overwrite the value a's value
        else:
            a[key] = b[key]
    return a


def main():
    parser = argparse.ArgumentParser("")
    parser.add_argument("-o", "--output", type=argparse.FileType('w'), required=True,
                        help="Path to the output file of the merged result")
    parser.add_argument("-s", "--source", type=argparse.FileType('r'), required=True,
                        help="Original yaml forming the base of the merge")
    parser.add_argument("-m", "--merge", type=argparse.FileType('r'), nargs='+',
                        help="Files to merge against the original 'source' yaml file")

    cli_args = parser.parse_args()

    files = [cli_args.source]
    files.extend(cli_args.merge)
    print([f.name for f in files])
    yaml_result = reduce(merge, [load(f, Loader=Loader) for f in files])
    print(dump(yaml_result, default_flow_style=False), file=cli_args.output)


if __name__ == "__main__":
    main()
