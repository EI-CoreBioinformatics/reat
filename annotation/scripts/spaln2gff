#!/usr/bin/env python3
import sys
import argparse
from collections import defaultdict


class Exon:
    def __init__(self, uid, gstart, gend, tstart, tend, score, phase):
        self.uid = uid
        self.gstart = gstart
        self.gend = gend
        self.tstart = tstart
        self.tend = tend
        self.score = score
        self.phase = phase

    def __repr__(self):
        return "{0}-{1}\t{2}-{3}\t{4}\t{5}".format(self.gstart, self.gend, self.tstart, self.tend, self.phase,
                                                   self.score)

    def __str__(self):
        return "{0}-{1}\t{2}-{3}\t{4}\t{5}".format(self.gstart, self.gend, self.tstart, self.tend, self.phase,
                                                   self.score)


class Gene:
    def __init__(self, uid, genome, gstart, gend, target, strand, score, identity, coverage,
                 target_length, exons):
        self.uid = uid
        self.genome = genome
        self.gstart = gstart
        self.gend = gend
        self.target = target
        self.strand = strand
        self.score = score
        self.identity = identity
        self.coverage = coverage  # SPALN reported coverage
        self.target_length = target_length
        self.exons = exons
        if '-' == strand:
            self.exons.reverse()
            for e in self.exons:
                if e.gstart > e.gend:
                    e.gstart, e.gend = e.gend, e.gstart
                e.tstart, e.tend = e.tend, e.tstart

        self.gstart = self.exons[0].gstart

        alignment_len = self.exons[-1].tend - self.exons[0].tstart + 1
        if '-' == self.strand:
            alignment_len = self.exons[0].tstart - self.exons[-1].tend + 1

        self.qcoverage = 100. * alignment_len / self.target_length  # Query coverage

    def to_gff(self, file=sys.stdout):
        print("{0}\tALN\tgene\t{1}\t{2}\t{3}\t{4}\t.\tID={5}.g{6};Name={5}.g{6}"
              .format(self.genome, self.gstart, self.gend, self.score, self.strand, self.target, self.uid),
              file=file)
        print("{0}\tALN\tmRNA\t{1}\t{2}\t{3}\t{4}\t.\tID={5}.m{6};Parent={5}.g{6};Name={5}.m{6};"
              "Note={5}|cov:{7:.2f}|id:{8:.2f}"
              .format(self.genome, self.gstart, self.gend, self.score, self.strand, self.target, self.uid,
                      self.qcoverage, self.identity),
              file=file)

        for e, exon in enumerate(self.exons, 1):
            if exon.gstart > exon.gend:
                exon.gstart, exon.gend = exon.gend, exon.gstart
            print("{0}\tALN\tCDS\t{1}\t{2}\t{3}\t{4}\t{5}\tID={6}.m{8}.cds{7};Parent={6}.m{8}"
                  .format(self.genome, exon.gstart, exon.gend, exon.score, self.strand, exon.phase,
                          self.target, e, self.uid),
                  file=file)
            print("{0}\tALN\texon\t{1}\t{2}\t{3}\t{4}\t{5}\tID={6}.m{8}.exon{7};Parent={6}.m{8}"
                  .format(self.genome, exon.gstart, exon.gend, exon.score, self.strand, exon.phase,
                          self.target, e, self.uid),
                  file=file)
        print("###", file=file)


class SpalnReader(object):
    def __init__(self, fp):
        self.file = fp
        self.lineno = 0
        self.cur = 0
        self.line = ""
        self.raw = []
        self.num_genes = 0
        self.num_exons = 0
        self.genes = defaultdict(int)

    def __enter__(self):
        return self

    def __iter__(self):
        return self

    def __next__(self):
        self.advance()
        exon_list = []
        valid = True
        while True:
            try:
                if self.raw[0] == '!!!!!':
                    self.advance()
                if self.raw[0] == '@':
                    self.num_genes += 1
                    genome = self.raw[1]
                    strand = self.raw[2]
                    gstart = int(self.raw[4])
                    gend = int(self.raw[5])
                    if gstart > gend:
                        gend, gstart = abs(gstart), abs(gend)
                    target = self.raw[7]
                    self.genes[target] += 1
                    score = float(self.raw[14])
                    identity = float(self.raw[16])
                    coverage = float(self.raw[18])
                    target_len = int(self.raw[8])
                    if valid:
                        return Gene(self.genes[target], genome, gstart, gend, target,
                                    strand, score, identity, coverage, target_len, exon_list)
                    else:
                        self.advance()
                        self.num_exons -= len(exon_list)
                        exon_list = []
                        valid = True
                        continue
                else:
                    self.num_exons += 1
                    target = self.raw[0]
                    genome = self.raw[1]
                    match = self.raw[2]
                    tstart = int(self.raw[6])
                    tend = int(self.raw[7])
                    gstart = int(self.raw[8])
                    gend = int(self.raw[9])
                    if gstart < 0 or gend < 0:
                        valid = False
                    phase = self.raw[18]
                    if phase == '2':
                        phase = 1
                    if phase == '1':
                        phase = 2
                    exon_list.append(Exon(self.num_exons, gstart, gend, tstart, tend, match, phase))
            except StopIteration as _:
                raise StopIteration("EOF")
            except Exception as e:
                print(f"Unexpected input at line {self.lineno}:\n {self.line}", file=sys.stderr)
            self.advance()

    def advance(self):
        self.line = self.file.readline()
        self.lineno += 1
        self.raw = self.line.strip().split()
        if len(self.raw) == 0 or self.raw[0] == '':
            raise StopIteration("EOF")


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("-i", "--spaln_filename")
    ap.add_argument("-o", "--gff3_output")
    ap.add_argument("-s", "--source", required=True, help="source name for gff3 file")
    ap.add_argument("--min_coverage", type=int, default=80)
    ap.add_argument("--min_identity", type=int, default=50)
    args = ap.parse_args()
    min_identity = args.min_identity
    min_coverage = args.min_coverage

    if not args.spaln_filename:
        spaln_file = sys.stdin
    else:
        spaln_file = open(args.spaln_filename, 'r')

    if not args.gff3_output:
        output_gff3 = sys.stdout
    else:
        output_gff3 = open(args.gff3_output, 'w')

    print("##gff-version 3", file=output_gff3)
    for g in SpalnReader(spaln_file):
        if g.qcoverage >= min_coverage and g.identity >= min_identity:
            if all([g.gstart <= e.gstart <= g.gend and
                    g.gstart <= e.gend <= g.gend for e in g.exons]):
                g.to_gff(output_gff3)


if __name__ == "__main__":
    try:
        main()
    except (BrokenPipeError, IOError):
        sys.stderr.close()
