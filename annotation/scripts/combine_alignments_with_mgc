#!/usr/bin/env python

import argparse
from annotation.lib.parsers.GFF import GFFReader


def main():
    p = argparse.ArgumentParser()
    p.add_argument("--detail", type=argparse.FileType('r'),
                   help="multi_genome_compare details result file")
    p.add_argument("--gff", type=argparse.FileType('r'),
                   help="Gff file to augment with the detail file")
    p.add_argument("-o", "--output", type=argparse.FileType('w'),
                   help="Augmented output gff file path")
    p.add_argument("--cds_filter", type=int,
                   help="Filter alignments with CDS identity lower than this value")
    p.add_argument("--exon_f1_filter", type=int, default=0,
                   help="Filter alignments with an exon F1 lower than this value")
    p.add_argument("--junction_f1_filter", type=int, default=0,
                   help="Filter alignments with a junction F1 lower than this value")

    args = p.parse_args()
    detail_file = args.detail
    gff_file = args.gff
    output_file = args.output

    mrna_details = dict()
    detail_file.readline()
    for detail_line in detail_file:
        line_data = detail_line.strip().split('\t')

        # Ignore any detail lines coming from what would be another alignment,
        #   these would look similar to mrna.XXXXXX.t1.m1
        split_reference_transcript_name = line_data[1].split('.')
        if len(split_reference_transcript_name) > 2 and \
                split_reference_transcript_name[-2][0] == 't' \
                and split_reference_transcript_name[-1][0] == 'm':
            continue
        aligned_mrna = line_data[3]
        cds_id, cds_exon_f1, cds_junction_f1, cds_ccode = line_data[15], line_data[18], line_data[21], line_data[22]
        mrna_details[aligned_mrna] = {"cds_id": cds_id,
                                      "cds_exon_f1": cds_exon_f1,
                                      "cds_junction_f1": cds_junction_f1,
                                      "cds_ccode": cds_ccode
                                      }
    for gene in GFFReader(gff_file):
        valid_mrnas = []
        for mrna_id, mrna in gene.mrnas.items():
            extra_note = []
            details = mrna_details.get(mrna_id, {'cds_id': 'NA', 'cds_exon_f1': 0.0,
                                                 'cds_junction_f1': 0.0, 'cds_ccode': 'u'})
            if details['cds_exon_f1'] != 'NA' and float(details['cds_exon_f1']) < args.exon_f1_filter:
                continue
            if details['cds_junction_f1'] != 'NA' and float(details['cds_junction_f1']) < args.junction_f1_filter:
                continue
            valid_mrnas.append(mrna)
            for k, v in details.items():
                mrna.attr[k] = v
                extra_note.append(f"{k}:{v}")
            try:
                mrna.attr['Note'] += '|' + '|'.join(extra_note)
            except KeyError:
                mrna.attr['Note'] = '|'.join(extra_note)
        if len(valid_mrnas) > 0:
            gene.print_gff_line(file=output_file)
            for mrna in valid_mrnas:
                mrna.print_gff(file=output_file)


if __name__ == "__main__":
    main()
