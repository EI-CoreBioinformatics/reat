#!/usr/bin/env python3
import sys
import textwrap

import pyfaidx
from argparse import ArgumentParser, FileType
# Read the index
# Sort the sequences by length
# For the 'lower' half, combine the top and the bottom if the sum of lengths is < 'chunk_size' and the length of a single sequence is < 'chunk_size'
# keep adding from 'lower' whilst the length of a single sequence is < CHUNK_SIZE or if adding another sequence would make the total length > chunk_size
# Repeat
# All the partitions from the previous go multiple many_seqs_N.fa files
# The rest of the sequences are long enough to be chunked, so they go on to the 'single_seqs.fa' file and the chunked regions are output to the 'chunks.txt' file


def wrap(text, width=80):
    return '\n'.join(textwrap.wrap(text, width))


def main():
    parser = ArgumentParser("")
    parser.add_argument("--reference", type=FileType('r'), help="Reference genome to partition")
    parser.add_argument("--chunk_size", type=int, default=5000000, help="Size of the chunks to partition the genome into")
    args = parser.parse_args()
    CHUNK_SIZE = args.chunk_size
    sequences = []
    with pyfaidx.Faidx(args.reference.name) as fasta_index:
        for name, v in fasta_index.index.items():
            sequences.append((name, int(v.rlen)))

        sequences.sort(key=lambda x: x[1])
        seq_idx = 0
        partitions = 0
        while seq_idx < len(sequences) and CHUNK_SIZE > sequences[seq_idx][1]:
            partitions += 1
            many_seqs_file = open(f'many_seqs_{partitions}.fa', 'w')
            total_nts = sequences[seq_idx][1]
            partition_sequences = [sequences[seq_idx][0]]
            while seq_idx < len(sequences) - 1 and CHUNK_SIZE > total_nts + sequences[seq_idx+1][1] and CHUNK_SIZE > sequences[seq_idx+1][1]:
                seq_idx += 1
                total_nts += sequences[seq_idx][1]
                partition_sequences.append(sequences[seq_idx][0])

            with open(f"many_seqs_{partitions}.txt", 'w') as many_seqs_list:
                print('\n'.join(partition_sequences), file=many_seqs_list)
            print(f"Partition {partitions}, contains {', '.join(partition_sequences)}\nwith a total of {total_nts} nts")

            print(f"These sequences are represented in {many_seqs_file.name}")
            for s in partition_sequences:
                print(f">{s}\n{wrap(fasta_index.fetch(s, 1, fasta_index.index[s].rlen).seq)}", file=many_seqs_file)
            seq_idx += 1
            many_seqs_file.close()

        while seq_idx < len(sequences):
            with open(f'single_seqs_{seq_idx}.fa', 'w') as single_seqs_file, open(f'single_seqs_{seq_idx}.txt', 'w') as single_seq_list:
                seq_name = sequences[seq_idx][0]
                print(f"Adding {seq_name} to {single_seqs_file.name}")
                print(f"{seq_name}", file=single_seq_list)
                print(f">{seq_name} {fasta_index.index[seq_name].rlen}\n{wrap(fasta_index.fetch(seq_name, 1, fasta_index.index[seq_name].rlen).seq)}", file=single_seqs_file)
                seq_idx += 1
    print("Done")
    return 0


if __name__ == "__main__":
    sys.exit(main())
